
/////////////
// Prelude //
/////////////

type Nil = null;
type Cons<A> = { car: A, cdr: List<A> }
type List<A> = Nil | Cons<A>

type Left<A> = { type: "left", left: A };
type Right<B> = { type: "right", right: B };
type Either<A, B> = Left<A> | Right<B>;

type Nothing = null;
type Just<A> = { value: A };
type Maybe<A> = Nothing | Just<A>;

type Pair<A, B> = [A, B];

type Entry<K, V> = Pair<K, V>
type Dict<K, V> = List<Entry<K, V>>

type Edge<N> = Pair<N, N>;
type Graph<N> = List<Edge<N>>;

////////////
// Domain //
////////////

type Specifier = string;
type Target = string;
type Hash = string;
type Message = string;
type Import = {origin: Specifier, target: Target};

type Link = (specifier: Specifier) => Promise<Either<Message, Target[]>>;
type Resolve = (import_: Import) => Promise<Either<Message, Specifier | null>>;
type Digest = (specifier: Specifier) => Promise<Either<Message, Hash>>;
type Validate = (specifier: Specifier) => Promise<Either<Message, null>>;
type Plugin = { link: Link, resolve: Resolve, digest: Digest, validate: Validate };
